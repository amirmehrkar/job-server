---
name: CI

on:
  push:

jobs:
  assets:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # Node.js
      - name: Cache node_modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install node_modules
        run: npm ci

      - name: Lint assets
        run: npm run lint

      - name: Run JS tests
        run: npm run test:coverage

      - name: Build assets
        run: npm run build

      - name: Store assets
        uses: actions/upload-artifact@v2
        with:
          name: node-assets
          path: assets/dist

  format:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"
      - uses: extractions/setup-just@v1
      - run: ls -lah ${{ github.workspace }}
      - name: Check formatting
        run: |
          just format

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"
      - uses: extractions/setup-just@v1
      - name: Check linting
        run: |
          just lint

  sort:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"
      - uses: extractions/setup-just@v1
      - name: Check import sorting
        run: |
          just sort

  upgrade:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"
      - uses: extractions/setup-just@v1
      - name: Check for syntax upgrades
        run: |
          just check-for-upgrades

  test:
    needs: [assets, format, lint, sort, upgrade]
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: jobserver
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"
      - uses: extractions/setup-just@v1

      - name: Retrieve assets
        uses: actions/download-artifact@v2
        with:
          name: node-assets
          path: assets/dist

      - name: Run tests
        env:
          DATABASE_URL: postgres://user:password@localhost/jobserver
          SECRET_KEY: 12345
          SOCIAL_AUTH_GITHUB_KEY: test
          SOCIAL_AUTH_GITHUB_SECRET: test
        run: |
          just test

  lint-dockerfile:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: hadolint/hadolint-action@v1.4.0

  docker-compose:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Test docker-compose stack boots
        run: docker-compose up --detach

      - run: docker ps

      - name: Test docker-compose accepts traffic
        run: docker exec job-server_job-server-1 curl -s --retry 10 --retry-connrefused http://localhost:8000/

  deploy:
    needs: [test, lint-dockerfile]
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/main'

    concurrency: deploy-production

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Deploy to dokku
        uses: opensafely-core/dokku-deploy-github-action@v1
        with:
          app-name: "job-server"
          dokku-host: ${{ secrets.DOKKU_HOST }}
          ssh-private-key: ${{ secrets.DOKKU2_DEPLOY_SSH_KEY }}
          remote-branch: "main"

      - name: Create Sentry release
        uses: getsentry/action-release@744e4b262278339b79fb39c8922efcae71e98e39
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
